version: '3.8'

services:
  orchestrator:
    build:
      context: .
      dockerfile: orchestrator/Dockerfile
    ports:
      - "8000:8000"
    env_file:
      - .env
    environment:
      - DATABASE_URL=postgresql://user:password@postgres:5432/codeagent
      - REDIS_URL=redis://redis:6379
      - MINIO_ENDPOINT=minio:9000
      - MINIO_ACCESS_KEY=minioadmin
      - MINIO_SECRET_KEY=minioadmin
    depends_on:
      - postgres
      - redis
      - minio

  postgres:
    image: postgres:13
    environment:
      POSTGRES_DB: codeagent
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5433:5432"

  redis:
    image: redis:alpine
    ports:
      - "6379:6379"

  minio:
    image: minio/minio
    command: server /data --console-address ":9001"
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    volumes:
      - minio_data:/data

  tool_api_gateway:
    build:
      context: .
      dockerfile: tool_api_gateway/Dockerfile
    ports:
      - "8001:8000"
    environment:
      - SANDBOX_EXECUTOR_URL=http://sandbox_executor:8000
    depends_on:
      - sandbox_executor
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8000/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5

  sandbox_executor:
    build:
      context: .
      dockerfile: sandbox_executor/Dockerfile
    ports:
      - "8002:8000"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    privileged: true
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8000/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5

  comparator_service:
    build:
      context: .
      dockerfile: comparator_service/Dockerfile
    ports:
      - "8003:8000"
    environment:
      - SANDBOX_EXECUTOR_URL=http://sandbox_executor:8000
      - TOOL_API_GATEWAY_URL=http://tool_api_gateway:8000
    depends_on:
      - sandbox_executor
      - tool_api_gateway
    volumes:
      - comparator_output:/output
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8000/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5

  agent_fix_implementation:
    build:
      context: .
      dockerfile: agents/fix_implementation/Dockerfile
    ports:
      - "8004:8000"
    env_file:
      - .env
    environment:
      - ORCHESTRATOR_URL=http://orchestrator:8000
      - TOOL_API_GATEWAY_URL=http://tool_api_gateway:8000
      # Example of explicit substitution for sensitive vars if needed:
      - DEEPSEEK_API_KEY=${DEEPSEEK_API_KEY}
    depends_on:
      - orchestrator
      - tool_api_gateway
      - sandbox_executor
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8000/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5

  ui:
    build: ./ui
    ports:
      - "3000:80"
    depends_on:
      - orchestrator
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost/ || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5

  agent_debugger:
    build:
      context: .
      dockerfile: agents/debugger/Dockerfile
    ports:
      - "8005:8000"
    env_file:
      - .env
    environment:
      - ORCHESTRATOR_URL=http://orchestrator:8000
      - TOOL_API_GATEWAY_URL=http://tool_api_gateway:8000
    depends_on:
      - orchestrator
      - tool_api_gateway
      - sandbox_executor
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8000/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5

  agent_review:
    build:
      context: .
      dockerfile: agents/review/Dockerfile
    ports:
      - "8006:8000"
    env_file:
      - .env
    environment:
      - ORCHESTRATOR_URL=http://orchestrator:8000
      - TOOL_API_GATEWAY_URL=http://tool_api_gateway:8000
    depends_on:
      - orchestrator
      - tool_api_gateway
      - sandbox_executor
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8000/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5

  agent_testing:
    build:
      context: .
      dockerfile: agents/testing/Dockerfile
    ports:
      - "8007:8000"
    env_file:
      - .env
    environment:
      - ORCHESTRATOR_URL=http://orchestrator:8000
      - TOOL_API_GATEWAY_URL=http://tool_api_gateway:8000
    depends_on:
      - orchestrator
      - tool_api_gateway
      - sandbox_executor
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8000/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5

  agent_security:
    build:
      context: .
      dockerfile: agents/security/Dockerfile
    ports:
      - "8008:8000"
    env_file:
      - .env
    environment:
      - ORCHESTRATOR_URL=http://orchestrator:8000
      - TOOL_API_GATEWAY_URL=http://tool_api_gateway:8000
    depends_on:
      - orchestrator
      - tool_api_gateway
      - sandbox_executor
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8000/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5

  agent_performance:
    build:
      context: .
      dockerfile: agents/performance/Dockerfile
    ports:
      - "8009:8000"
    env_file:
      - .env
    environment:
      - ORCHESTRATOR_URL=http://orchestrator:8000
      - TOOL_API_GATEWAY_URL=http://tool_api_gateway:8000
    depends_on:
      - orchestrator
      - tool_api_gateway
      - sandbox_executor
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8000/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5

  agent_feedback:
    build:
      context: .
      dockerfile: agents/feedback/Dockerfile
    ports:
      - "8010:8000"
    env_file:
      - .env
    environment:
      - ORCHESTRATOR_URL=http://orchestrator:8000
      - TOOL_API_GATEWAY_URL=http://tool_api_gateway:8000
    depends_on:
      - orchestrator
      - tool_api_gateway
      - sandbox_executor
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8000/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5

  agent_task_classifier:
    build:
      context: .
      dockerfile: agents/task_classifier/Dockerfile
    ports:
      - "8011:8000"
    env_file:
      - .env
    environment:
      - ORCHESTRATOR_URL=http://orchestrator:8000
    depends_on:
      - orchestrator
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8000/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5

  agent_deployment:
    build:
      context: .
      dockerfile: agents/deployment/Dockerfile
    ports:
      - "8017:8000"
    env_file:
      - .env
    environment:
      - ORCHESTRATOR_URL=http://orchestrator:8000
      - TOOL_API_GATEWAY_URL=http://tool_api_gateway:8000
    depends_on:
      - orchestrator
      - tool_api_gateway
      - sandbox_executor
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8000/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5

  agent_monitoring:
    build:
      context: .
      dockerfile: agents/monitoring/Dockerfile
    ports:
      - "8018:8000"
    env_file:
      - .env
    environment:
      - ORCHESTRATOR_URL=http://orchestrator:8000
      - TOOL_API_GATEWAY_URL=http://tool_api_gateway:8000
    depends_on:
      - orchestrator
      - tool_api_gateway
      - sandbox_executor
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8000/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5

  agent_web_scraper:
    build:
      context: .
      dockerfile: agents/web_scraper/Dockerfile
    ports:
      - "8015:8000"
    env_file:
      - .env
    environment:
      - ORCHESTRATOR_URL=http://orchestrator:8000
      - TOOL_API_GATEWAY_URL=http://tool_api_gateway:8000
    depends_on:
      - orchestrator
      - tool_api_gateway
      - sandbox_executor
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8000/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5

  vector_store:
    build:
      context: .
      dockerfile: vector_store/Dockerfile
    ports:
      - "8006:8000"
    volumes:
      - vector_store_data:/app/vector_store
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8000/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5

  prompt_store:
    build:
      context: .
      dockerfile: prompt_store/Dockerfile
    ports:
       - "8007:8000"
    env_file:
       - .env
    environment:
       - DATABASE_URL=postgresql://user:password@postgres:5432/codeagent
       - MINIO_ENDPOINT=minio:9000
       - MINIO_ACCESS_KEY=minioadmin
       - MINIO_SECRET_KEY=minioadmin
    depends_on:
       - postgres
       - minio
    healthcheck:
       test: ["CMD-SHELL", "curl -f http://localhost:8000/health || exit 1"]
       interval: 10s
       timeout: 5s
       retries: 5

  transcript_store:
    build:
      context: .
      dockerfile: transcript_store/Dockerfile
    ports:
       - "8008:8000"
    env_file:
       - .env
    environment:
       - DATABASE_URL=postgresql://user:password@postgres:5432/codeagent
       - MINIO_ENDPOINT=minio:9000
       - MINIO_ACCESS_KEY=minioadmin
       - MINIO_SECRET_KEY=minioadmin
    depends_on:
       - postgres
       - minio
    healthcheck:
       test: ["CMD-SHELL", "curl -f http://localhost:8000/health || exit 1"]
       interval: 10s
       timeout: 5s
       retries: 5

  # Add similar placeholders for other agents: review, deployment, monitoring, testing, security, performance, comparator, feedback

volumes:
  postgres_data:
  minio_data:
  comparator_output:
  vector_store_data: