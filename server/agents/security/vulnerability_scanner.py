import subprocess
import json
import os
from typing import List, Dict, Any, Optional, Union
from pydantic import BaseModel

class Vulnerability(BaseModel):
    id: str
    severity: str
    description: str
    file: Optional[str] = None
    line: Optional[int] = None
    cwe: Optional[str] = None
    cvss_score: Optional[float] = None

class ScanResult(BaseModel):
    tool: str
    vulnerabilities: List[Vulnerability]
    summary: Dict[str, Union[int, str]]

class VulnerabilityScanner:
    def __init__(self):
        self.tools = {
            'semgrep': self._run_semgrep,
            'trivy': self._run_trivy
        }

    def scan_codebase(self, path: str, tools: Optional[List[str]] = None) -> List[ScanResult]:
        """Scan codebase using specified tools"""
        if tools is None:
            tools = ['semgrep', 'trivy']

        results = []
        for tool in tools:
            if tool in self.tools:
                try:
                    result = self.tools[tool](path)
                    results.append(result)
                except Exception as e:
                    print(f"Error running {tool}: {e}")
        return results

    def _run_semgrep(self, path: str) -> ScanResult:
        """Run Semgrep static analysis"""
        try:
            cmd = ['semgrep', '--json', '--config', 'auto', path]
            result = subprocess.run(cmd, capture_output=True, text=True, timeout=300)

            vulnerabilities = []
            if result.returncode == 0 and result.stdout:
                data = json.loads(result.stdout)
                for result_item in data.get('results', []):
                    for vuln in result_item.get('extra', {}).get('metadata', {}).get('cwe', []):
                        vulnerabilities.append(Vulnerability(
                            id=result_item.get('check_id', ''),
                            severity=result_item.get('extra', {}).get('severity', 'unknown'),
                            description=result_item.get('extra', {}).get('message', ''),
                            file=result_item.get('path', ''),
                            line=result_item.get('start', {}).get('line'),
                            cwe=vuln
                        ))

            summary = {
                'total': len(vulnerabilities),
                'high': len([v for v in vulnerabilities if v.severity == 'high']),
                'medium': len([v for v in vulnerabilities if v.severity == 'medium']),
                'low': len([v for v in vulnerabilities if v.severity == 'low'])
            }

            return ScanResult(tool='semgrep', vulnerabilities=vulnerabilities, summary=summary)

        except subprocess.TimeoutExpired:
            return ScanResult(tool='semgrep', vulnerabilities=[], summary={'error': 'timeout'})
        except Exception as e:
            return ScanResult(tool='semgrep', vulnerabilities=[], summary={'error': str(e)})

    def _run_trivy(self, path: str) -> ScanResult:
        """Run Trivy vulnerability scanner"""
        try:
            # Check if path is a container image or filesystem
            if os.path.isfile(os.path.join(path, 'Dockerfile')) or ':' in path:
                # Container image scan
                cmd = ['trivy', 'image', '--format', 'json', path]
            else:
                # Filesystem scan
                cmd = ['trivy', 'fs', '--format', 'json', path]

            result = subprocess.run(cmd, capture_output=True, text=True, timeout=300)

            vulnerabilities = []
            if result.returncode == 0 and result.stdout:
                data = json.loads(result.stdout)
                for result_item in data.get('Results', []):
                    for vuln in result_item.get('Vulnerabilities', []):
                        vulnerabilities.append(Vulnerability(
                            id=vuln.get('VulnerabilityID', ''),
                            severity=vuln.get('Severity', 'unknown'),
                            description=vuln.get('Description', ''),
                            cwe=vuln.get('CweIDs', [None])[0] if vuln.get('CweIDs') else None,
                            cvss_score=vuln.get('CVSS', {}).get('nvd', {}).get('V3Score')
                        ))

            summary = {
                'total': len(vulnerabilities),
                'high': len([v for v in vulnerabilities if v.severity.upper() == 'HIGH']),
                'medium': len([v for v in vulnerabilities if v.severity.upper() == 'MEDIUM']),
                'low': len([v for v in vulnerabilities if v.severity.upper() == 'LOW'])
            }

            return ScanResult(tool='trivy', vulnerabilities=vulnerabilities, summary=summary)

        except subprocess.TimeoutExpired:
            return ScanResult(tool='trivy', vulnerabilities=[], summary={'error': 'timeout'})
        except Exception as e:
            return ScanResult(tool='trivy', vulnerabilities=[], summary={'error': str(e)})